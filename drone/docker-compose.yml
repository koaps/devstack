version: '3'
services:

  runner:
    image: drone/drone-runner-docker:1
    container_name: drone_runner
    environment:
    - DRONE_DEBUG=true
    - DRONE_RPC_PROTO=http
    - DRONE_RPC_HOST=drone_server
    - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:?err}
    - DRONE_RUNNER_CAPACITY=2
    - DRONE_RUNNER_NAME=drone_runner
    labels:
      container_group: drone
    logging:
      driver: journald
      options:
        labels: container_group
    networks:
    - local
    ports:
    - 8300:3000
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock

  server:
    image: drone/drone:1
    container_name: drone_server
    environment:
    - DRONE_AGENTS_ENABLED=true
    - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_SOURCE:?err}
    - DRONE_DATABASE_DRIVER=${DRONE_DATABASE_DRIVER:?err}
    - DRONE_DATADOG_ENABLED=false
    - DRONE_DATADOG_ENDPOINT=
    - DRONE_GIT_ALWAYS_AUTH=false
    - DRONE_GOGS_SERVER=http://gogs:3000
    - DRONE_GOGS_SKIP_VERIFY=true
    - DRONE_LIMIT_TRUSTED=false
    - DRONE_LOGS_DEBUG=true
    - DRONE_REGISTRATION_CLOSED=false
    - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:?err}
    - DRONE_RUNNER_CAPACITY=2
    - DRONE_SERVER_HOST=drone_server
    - DRONE_SERVER_PROTO=http
    - DRONE_TLS_AUTOCERT=false
    - DRONE_USER_CREATE=username:${GOGS_ADMIN:?err},admin:true
    labels:
      container_group: drone
    logging:
      driver: journald
      options:
        labels: container_group
    mem_limit: 1G
    memswap_limit: 2G
    mem_reservation: 512m
    networks:
    - local
    ports:
    - 8000:80
    - 8443:443
    restart: unless-stopped
    volumes:
    - ${DEVSTACK_DIR:?err}/drone:/data
